{"name": "test01[case12]", "status": "broken", "statusDetails": {"message": "TypeError: write_excel() missing 1 required positional argument: 'msg'", "trace": "self = <Cases.test01.Test01 object at 0x000001AF7F5679D0>, case = {'expect': '状态码200\\ncode 0', 'headers': 'Content-Type: application/json', 'method': 'post', 'param_type': 'json', ...}\n\n    @pytest.mark.parametrize(\"case\", tool.read_json())\n    def test01(self, case):\n        logger.info(\"正在执行调用执行数据：%s\" %case)\n        try:\n            # 调用 执行接口方法\n>           r = Api(case).run_method()\n\nCases\\test01.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Api.api.Api object at 0x000001AF7F753C70>\n\n    def run_method(self):\n        logger.info(\"正在调用运行接口方法。。。\")\n        # 判断方法\n        if self.method==\"get\":\n            return self._get()\n        elif self.method == \"post\":\n>           return self._post()\n\nApi\\api.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Api.api.Api object at 0x000001AF7F753C70>\n\n    def _post(self):\n        logger.info(\"正在调用post请求方法。。。\")\n        # 判断参数类型\n        if self.param_type == \"json\":\n>           return requests.post(url=self.url, json=self.params, headers=self.headers)\n\nApi\\api.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nurl = 'http://www.test.com/api/v1/goods', data = None\njson = '{\\n\"goodsname\": \"《selenium入门到精通09》\",\\n\"goodscode\": \"ps_00002\",\\n\"merchantid\": \"sh0011000111sh00110001111\",\\n\"merchantname\": \"小小\",\\n\"goodsprice\": 49.9,\\n\"stock\": 100,\\n\"goodsgroupid\": 0,\\n\"goodsstatus\": 1,\\n\"price\": 21.0\\n}'\nkwargs = {'headers': 'Content-Type: application/json'}\n\n    def post(url, data=None, json=None, **kwargs):\n        r\"\"\"Sends a POST request.\n    \n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) json data to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n        \"\"\"\n    \n>       return request('post', url, data=data, json=json, **kwargs)\n\n..\\python39\\lib\\site-packages\\requests\\api.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmethod = 'post', url = 'http://www.test.com/api/v1/goods'\nkwargs = {'data': None, 'headers': 'Content-Type: application/json', 'json': '{\\n\"goodsname\": \"《selenium入门到精通09》\",\\n\"goodscode\"...,\\n\"merchantname\": \"小小\",\\n\"goodsprice\": 49.9,\\n\"stock\": 100,\\n\"goodsgroupid\": 0,\\n\"goodsstatus\": 1,\\n\"price\": 21.0\\n}'}\nsession = <requests.sessions.Session object at 0x000001AF7F7539D0>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          >>> req\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\n\n..\\python39\\lib\\site-packages\\requests\\api.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.sessions.Session object at 0x000001AF7F7539D0>, method = 'post', url = 'http://www.test.com/api/v1/goods', params = None, data = None\nheaders = 'Content-Type: application/json', cookies = None, files = None, auth = None, timeout = None, allow_redirects = True, proxies = None, hooks = None, stream = None, verify = None\ncert = None\njson = '{\\n\"goodsname\": \"《selenium入门到精通09》\",\\n\"goodscode\": \"ps_00002\",\\n\"merchantid\": \"sh0011000111sh00110001111\",\\n\"merchantname\": \"小小\",\\n\"goodsprice\": 49.9,\\n\"stock\": 100,\\n\"goodsgroupid\": 0,\\n\"goodsstatus\": 1,\\n\"price\": 21.0\\n}'\n\n    def request(self, method, url,\n            params=None, data=None, headers=None, cookies=None, files=None,\n            auth=None, timeout=None, allow_redirects=True, proxies=None,\n            hooks=None, stream=None, verify=None, cert=None, json=None):\n        \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n        Returns :class:`Response <Response>` object.\n    \n        :param method: method for the new :class:`Request` object.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary or bytes to be sent in the query\n            string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) json to send in the body of the\n            :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the\n            :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the\n            :class:`Request`.\n        :param files: (optional) Dictionary of ``'filename': file-like-objects``\n            for multipart encoding upload.\n        :param auth: (optional) Auth tuple or callable to enable\n            Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Set to True by default.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol or protocol and\n            hostname to the URL of the proxy.\n        :param stream: (optional) whether to immediately download the response\n            content. Defaults to ``False``.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n            the server's TLS certificate, or a string, in which case it must be a path\n            to a CA bundle to use. Defaults to ``True``. When set to\n            ``False``, requests will accept any TLS certificate presented by\n            the server, and will ignore hostname mismatches and/or expired\n            certificates, which will make your application vulnerable to\n            man-in-the-middle (MitM) attacks. Setting verify to ``False``\n            may be useful during local development or testing.\n        :param cert: (optional) if String, path to ssl client cert file (.pem).\n            If Tuple, ('cert', 'key') pair.\n        :rtype: requests.Response\n        \"\"\"\n        # Create the Request.\n        req = Request(\n            method=method.upper(),\n            url=url,\n            headers=headers,\n            files=files,\n            data=data or {},\n            json=json,\n            params=params or {},\n            auth=auth,\n            cookies=cookies,\n            hooks=hooks,\n        )\n>       prep = self.prepare_request(req)\n\n..\\python39\\lib\\site-packages\\requests\\sessions.py:528: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <requests.sessions.Session object at 0x000001AF7F7539D0>, request = <Request [POST]>\n\n    def prepare_request(self, request):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for\n        transmission and returns it. The :class:`PreparedRequest` has settings\n        merged from the :class:`Request <Request>` instance and those of the\n        :class:`Session`.\n    \n        :param request: :class:`Request` instance to prepare with this\n            session's settings.\n        :rtype: requests.PreparedRequest\n        \"\"\"\n        cookies = request.cookies or {}\n    \n        # Bootstrap CookieJar.\n        if not isinstance(cookies, cookielib.CookieJar):\n            cookies = cookiejar_from_dict(cookies)\n    \n        # Merge with session cookies\n        merged_cookies = merge_cookies(\n            merge_cookies(RequestsCookieJar(), self.cookies), cookies)\n    \n        # Set environment's basic authentication if not explicitly set.\n        auth = request.auth\n        if self.trust_env and not auth and not self.auth:\n            auth = get_netrc_auth(request.url)\n    \n        p = PreparedRequest()\n>       p.prepare(\n            method=request.method.upper(),\n            url=request.url,\n            files=request.files,\n            data=request.data,\n            json=request.json,\n            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),\n            params=merge_setting(request.params, self.params),\n            auth=merge_setting(auth, self.auth),\n            cookies=merged_cookies,\n            hooks=merge_hooks(request.hooks, self.hooks),\n        )\n\n..\\python39\\lib\\site-packages\\requests\\sessions.py:456: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>, method = 'POST', url = 'http://www.test.com/api/v1/goods', headers = 'Content-Type: application/json', files = [], data = {}, params = OrderedDict()\nauth = None, cookies = <RequestsCookieJar[]>, hooks = {'response': []}\njson = '{\\n\"goodsname\": \"《selenium入门到精通09》\",\\n\"goodscode\": \"ps_00002\",\\n\"merchantid\": \"sh0011000111sh00110001111\",\\n\"merchantname\": \"小小\",\\n\"goodsprice\": 49.9,\\n\"stock\": 100,\\n\"goodsgroupid\": 0,\\n\"goodsstatus\": 1,\\n\"price\": 21.0\\n}'\n\n    def prepare(self,\n            method=None, url=None, headers=None, files=None, data=None,\n            params=None, auth=None, cookies=None, hooks=None, json=None):\n        \"\"\"Prepares the entire request with the given parameters.\"\"\"\n    \n        self.prepare_method(method)\n        self.prepare_url(url, params)\n>       self.prepare_headers(headers)\n\n..\\python39\\lib\\site-packages\\requests\\models.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>, headers = 'Content-Type: application/json'\n\n    def prepare_headers(self, headers):\n        \"\"\"Prepares the given HTTP headers.\"\"\"\n    \n        self.headers = CaseInsensitiveDict()\n        if headers:\n>           for header in headers.items():\nE           AttributeError: 'str' object has no attribute 'items'\n\n..\\python39\\lib\\site-packages\\requests\\models.py:449: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Cases.test01.Test01 object at 0x000001AF7F5679D0>, case = {'expect': '状态码200\\ncode 0', 'headers': 'Content-Type: application/json', 'method': 'post', 'param_type': 'json', ...}\n\n    @pytest.mark.parametrize(\"case\", tool.read_json())\n    def test01(self, case):\n        logger.info(\"正在执行调用执行数据：%s\" %case)\n        try:\n            # 调用 执行接口方法\n            r = Api(case).run_method()\n            print(\"响应数据为 %s\" %r.text)\n            print(\"响应状态码：%s\" %r.status_code)\n            # 断言\n            common_assert(r, case)\n            # 将执行结果写入报告\n            Test01.tool.write_excel(case.get(\"x_y\", \"执行成功\"))\n        except Exception as e:\n>           Test01.tool.write_excel(case.get(\"x_y\", \"执行失败！原因：%s\" %e))\nE           TypeError: write_excel() missing 1 required positional argument: 'msg'\n\nCases\\test01.py:31: TypeError"}, "attachments": [{"name": "log", "source": "8384c379-8bdd-4c8d-886b-38c2922d4da7-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'path': '/api/v1/goods', 'method': 'post', 'headers': 'Content-Type: application/json', 'param_type': 'json', 'params': '{\\n\"goodsname\": \"《selenium入门到精通09》\",\\n\"goodscode\": \"ps_00002\",\\n\"merchantid\": \"sh0011000111sh00110001111\",\\n\"merchantname\": \"小小\",\\n\"goodsprice\": 49.9,\\n\"stock\": 100,\\n\"goodsgroupid\": 0,\\n\"goodsstatus\": 1,\\n\"price\": 21.0\\n}', 'expect': '状态码200\\ncode 0', 'x_y': [14, 12]}"}], "start": 1627382067200, "stop": 1627382067215, "uuid": "90bd606b-28b1-43ef-91ae-6e9f17a91b69", "historyId": "10cc09750066e2b6378176dff9cb5ec5", "testCaseId": "1839a3022abcb0ab4092209767758eed", "fullName": "Cases.test01.Test01#test01", "labels": [{"name": "parentSuite", "value": "Cases"}, {"name": "suite", "value": "test01"}, {"name": "subSuite", "value": "Test01"}, {"name": "host", "value": "YLMF-2020VKOLAP"}, {"name": "thread", "value": "7976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Cases.test01"}]}